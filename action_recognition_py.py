# -*- coding: utf-8 -*-
"""action_recognition.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mT1iWhwTb60Vj7XzdT58ICR-F51TuhDu
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torch.utils.data as data
from torchvision import transforms

# 3D-CNN Model
class ActionRecognition3DCNN(nn.Module):
    def __init__(self, num_classes=5):
        super(ActionRecognition3DCNN, self).__init__()
        self.conv1 = nn.Conv3d(3, 64, kernel_size=(3, 3, 3), stride=1, padding=1)
        self.pool = nn.MaxPool3d(kernel_size=(2, 2, 2), stride=2)
        self.conv2 = nn.Conv3d(64, 128, kernel_size=(3, 3, 3), stride=1, padding=1)
        self.fc1 = nn.Linear(128 * 4 * 4 * 4, 512)
        self.fc2 = nn.Linear(512, num_classes)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.pool(self.relu(self.conv1(x)))
        x = self.pool(self.relu(self.conv2(x)))
        x = x.view(x.size(0), -1)
        x = self.relu(self.fc1(x))
        x = self.fc2(x)
        return x

# Initialize model
num_classes = 5  # e.g., Normal, Suspicious, Theft, Violence, Running
model = ActionRecognition3DCNN(num_classes)

# Loss function and optimizer
criterion = nn.CrossEntropyLoss()
optimizer = optim.Adam(model.parameters(), lr=0.001)